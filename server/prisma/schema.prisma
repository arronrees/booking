// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @unique @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     @db.VarChar(255)
  email     String     @unique @db.VarChar(255)
  telephone String     @db.VarChar(255)
  password  String
  age       Int
  Address   Address    @relation(fields: [addressId], references: [id])
  addressId String
  Purchase  Purchase[]
}

model AdminUser {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  telephone String   @db.VarChar(255)
  password  String
  age       Int
  Address   Address  @relation(fields: [addressId], references: [id])
  addressId String
  Event     Event[]
}

model Address {
  id           String      @id @unique @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  addressLine1 String      @db.VarChar(255)
  addressLine2 String?     @db.VarChar(255)
  town         String      @db.VarChar(255)
  county       String?     @db.VarChar(255)
  postcode     String      @db.VarChar(255)
  country      String      @db.VarChar(255)
  User         User[]
  AdminUser    AdminUser[]
  Event        Event[]
}

model Event {
  id          String        @id @unique @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @db.VarChar(255)
  description String
  date        DateTime
  Address     Address       @relation(fields: [addressId], references: [id])
  addressId   String
  AdminUser   AdminUser     @relation(fields: [adminUserId], references: [id])
  adminUserId String
  BookingType BookingType[]
  Booking     Booking[]
}

model BookingType {
  id          String    @id @unique @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    @db.VarChar(255)
  description String
  price       Float     @default(0)
  maxBookings Int       @default(0)
  Event       Event     @relation(fields: [eventId], references: [id])
  eventId     String
  Booking     Booking[]
}

model Booking {
  id            String      @id @unique @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  BookingType   BookingType @relation(fields: [bookingTypeId], references: [id])
  bookingTypeId String
  Event         Event       @relation(fields: [eventId], references: [id])
  eventId       String
  Purchase      Purchase[]
}

model Purchase {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Float
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  Booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId String
}
