// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id                      String     @id @unique @default(uuid())
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  name                    String     @db.VarChar(255)
  email                   String     @unique @db.VarChar(255)
  telephone               String     @db.VarChar(255)
  password                String
  age                     Int
  Address                 Address    @relation(fields: [addressId], references: [id])
  addressId               String
  Purchase                Purchase[]
  Event                   Event[]
  role                    Role       @default(USER)
  emailVerified           Boolean    @default(false)
  emailVerificationString String?
  adminVerified           Boolean    @default(false)
}

model Address {
  id           String   @id @unique @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  addressLine1 String   @db.VarChar(255)
  addressLine2 String?  @db.VarChar(255)
  town         String   @db.VarChar(255)
  county       String?  @db.VarChar(255)
  postcode     String   @db.VarChar(255)
  country      String   @db.VarChar(255)
  User         User[]
  Event        Event[]
}

model Event {
  id          String        @id @unique @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @db.VarChar(255)
  description String
  date        DateTime
  Address     Address       @relation(fields: [addressId], references: [id])
  addressId   String
  BookingType BookingType[]
  Booking     Booking[]
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
}

model BookingType {
  id          String    @id @unique @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    @db.VarChar(255)
  description String
  price       Float     @default(0)
  maxBookings Int       @default(0)
  Event       Event     @relation(fields: [eventId], references: [id])
  eventId     String
  Booking     Booking[]
}

model Booking {
  id            String      @id @unique @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  BookingType   BookingType @relation(fields: [bookingTypeId], references: [id])
  bookingTypeId String
  Event         Event       @relation(fields: [eventId], references: [id])
  eventId       String
  Purchase      Purchase[]
}

model Purchase {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Float
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  Booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId String
}
